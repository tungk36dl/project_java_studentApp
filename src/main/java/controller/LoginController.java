package controller;

import java.io.InputStream;
import java.util.Date;
import java.util.List;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import beans.RefreshToken;
import beans.User;
import dao.DaoRefreshToken;
import dao.DaoUser;
import mailservice.MailService;
import requests.AccountReq;
import utils.IdUtil;
import utils.JwtUtil;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RequestParam;
@Controller
public class LoginController {

    @Autowired
    private DaoUser daoUser;

    @Autowired
    private DaoRefreshToken daoRefreshToken;

    private final BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
    private static final Logger LOGGER = LoggerFactory.getLogger(LoginController.class);


	@GetMapping("/login")
	public String showLoginForm() {
	    return "authentication/login";
	}
	
	@PostMapping("/login")
	public String processLogin(
	        @RequestParam("username") String username,
	        @RequestParam("password") String password,
	        HttpSession session,
	        HttpServletResponse response,
	        Model model) {

		LOGGER.info("üî• ƒêang v√†o API login");
	    User user = daoUser.findByUsername(username);
	    LOGGER.debug("Username: {}", username);
	    LOGGER.debug("Password: {}", password);

	    if (user != null && passwordEncoder.matches(password, user.getPassword())) {
	        // 1. T·∫°o Access Token
	        String accessToken = JwtUtil.generateAccessToken(user);

	        // 2. T·∫°o Refresh Token
	        String refreshTokenStr = JwtUtil.generateRefreshToken();
	        Date expiryDate = JwtUtil.getRefreshTokenExpiry();
	        LOGGER.debug("-- expiryDate: {}", expiryDate.toString());
	        LOGGER.debug("-- accessToken: {}", accessToken);
	        LOGGER.debug("-- refreshTokenStr: {}", refreshTokenStr);

	        // 3. L∆∞u refresh token v√†o DB
	        RefreshToken refreshToken = new RefreshToken();
	        refreshToken.setId(IdUtil.generateId());
	        refreshToken.setUserId(user.getId());
	        refreshToken.setToken(refreshTokenStr);
	        refreshToken.setExpiryDate(expiryDate);
	        refreshToken.setStatus(true);
	        refreshToken.setCreatedDate(new Date());
	        refreshToken.setUpdatedDate(new Date());
	        daoRefreshToken.save(refreshToken);

	        // 4. L∆∞u Access Token v√†o HttpOnly cookie
	        Cookie accessTokenCookie = new Cookie("accessToken", accessToken);
	        accessTokenCookie.setHttpOnly(true);
	        accessTokenCookie.setPath("/");
	        accessTokenCookie.setMaxAge(5 * 60); // 5 ph√∫t
	        response.addCookie(accessTokenCookie);

	        // (Tu·ª≥ ch·ªçn) G·ª≠i refresh token qua cookie HttpOnly
	        Cookie cookie = new Cookie("refreshToken", refreshTokenStr);
	        cookie.setHttpOnly(true);
	        cookie.setPath("/");
	        cookie.setMaxAge(7 * 24 * 60 * 60); // 7 ng√†y
	        response.addCookie(cookie);

	        session.setAttribute("loggedInUser", user);
	        session.setAttribute("role", user.getRole()); // G√°n role v√†o session
	        session.setAttribute("userId",  user.getId());
	        return "redirect:/";
	    } else {
	        model.addAttribute("error", "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u");
	        return "authentication/login";
	    }
	}
	
//	@PostMapping("/refresh-token")
//	@ResponseBody
//	public String refreshToken(@CookieValue(value = "refreshToken", required = false) String refreshTokenCookie) {
//		LOGGER.debug("++ API /refresh-token");
//	    if (refreshTokenCookie == null) {
//	        return "Kh√¥ng t√¨m th·∫•y refresh token";
//	    }
//
//	    RefreshToken refreshToken = daoRefreshToken.findByToken(refreshTokenCookie);
//
//	    // Ki·ªÉm tra refresh token c√≥ h·ª£p l·ªá kh√¥ng
//	    if (refreshToken == null || !refreshToken.isStatus() || refreshToken.getExpiryDate().before(new Date())) {
//	        return "Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n";
//	    }
//
//	    // L·∫•y user t·ª´ refresh token
//	    User user = daoUser.getUserById(refreshToken.getUserId());
//	    if (user == null) {
//	        return "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i";
//	    }
//
//	    // T·∫°o Access Token m·ªõi
//	    String newAccessToken = JwtUtil.generateAccessToken(user);
//
//	    // Tr·∫£ v·ªÅ access token m·ªõi
//	    return newAccessToken;
//	}
//	
	@GetMapping("/refresh-token")
	public String refreshTokenPage(@CookieValue(value = "refreshToken", required = false) String refreshTokenCookie,
	                               HttpServletResponse response,
	                               HttpServletRequest request,
	                               HttpSession session,
	                               @RequestParam(value = "redirect", required = false, defaultValue = "/") String redirectUrl) {
		LOGGER.debug("-- call api:/refresh-token");
		LOGGER.debug("-- refreshTokenCookie: ", refreshTokenCookie);
		LOGGER.debug("--redirectUrl: {} ",redirectUrl);
	    if (refreshTokenCookie == null) {
	        return "redirect:/login";
	    }

	    
	    RefreshToken refreshToken = daoRefreshToken.findByToken(refreshTokenCookie);

	    if (refreshToken == null || !refreshToken.isStatus() || refreshToken.getExpiryDate().before(new Date())) {
	        return "redirect:/login";
	    }

	    User user = daoUser.getUserById(refreshToken.getUserId());
	    if (user == null) {
	        return "redirect:/login";
	    }

	    // T·∫°o l·∫°i accessToken
	    String newAccessToken = JwtUtil.generateAccessToken(user);
	    Cookie newAccessTokenCookie = new Cookie("accessToken", newAccessToken);
	    newAccessTokenCookie.setHttpOnly(true);
	    newAccessTokenCookie.setPath("/");
	    newAccessTokenCookie.setMaxAge(5 * 60); // 5 ph√∫t
	    response.addCookie(newAccessTokenCookie);

	    // C·∫≠p nh·∫≠t session th√¥ng tin user (n·∫øu c·∫ßn)
	    session.setAttribute("loggedInUser", user);
	    session.setAttribute("role", user.getRole());
        session.setAttribute("userId",  user.getId());

	 // X·ª≠ l√Ω ƒë·ªÉ tr√°nh l·∫∑p contextPath
	    String contextPath = request.getContextPath();
	    if (redirectUrl.startsWith(contextPath)) {
	        redirectUrl = redirectUrl.substring(contextPath.length());
	    }
	    LOGGER.debug("-- new redirectUrl sau khi remove contextPath: {}", redirectUrl);

	    return "redirect:" + redirectUrl;
	}

	
	@GetMapping("/logout")
	public String logout(HttpSession session, HttpServletResponse response,
			HttpServletRequest request) {
	    session.invalidate();

	    LOGGER.debug("--CAll API: /logout");
	    // 1. Xo√° refresh token trong database
	    Cookie[] cookies = request.getCookies();
	    if (cookies != null) {
	    	LOGGER.debug("-----1");
	        for (Cookie cookie : cookies) {
	        	LOGGER.debug("-----2");
	        	LOGGER.debug("---name: {}", cookie.getName());
	            if ("refreshToken".equals(cookie.getName())) {
	            	LOGGER.debug("-----3");
	                String refreshTokenCookie = cookie.getValue();
	        	    LOGGER.debug("----------- refreshTokenStr: {}", refreshTokenCookie);

	                if (refreshTokenCookie != null && !refreshTokenCookie.isEmpty()) {
	                    RefreshToken refreshToken = daoRefreshToken.findByToken(refreshTokenCookie);
	                    if (refreshToken != null) {
	            	    	daoRefreshToken.deleteToken(refreshTokenCookie);
	                    }
	                }
	            }
	        }
	    }
	    
	 
	    Cookie accessTokenCookie = new Cookie("accessToken", null);
	    accessTokenCookie.setMaxAge(0);
	    accessTokenCookie.setPath("/");
	    response.addCookie(accessTokenCookie);

	    Cookie refreshTokenCookie = new Cookie("refreshToken", null);
	    refreshTokenCookie.setMaxAge(0);
	    refreshTokenCookie.setPath("/");
	    response.addCookie(refreshTokenCookie);

	    return "redirect:/login";
	}

    

    
    @GetMapping("/register")
    public String Register(Model model) {
    	model.addAttribute("accountReq", new AccountReq());
    	return "authentication/register";
    }
    
    @PostMapping("/register")
    public String Register2(Model model) {
    	model.addAttribute("accountReq", new AccountReq());
    	return "authentication/register";
    }
    
    @GetMapping("/forgotPassword")
    public String ShowForgotPasswordForm() {
        return "authentication/forgotPassword"; 
    }
    
    @PostMapping("/forgotPassword")
    public String handleForgotPassword(
            @RequestParam("email") String email,
            HttpSession session,
            RedirectAttributes redirectAttributes,
            Model model) {
    	System.out.println("Session ID: " + session.getId());


        User user = daoUser.findByEmail(email);

        if (user == null) {
            model.addAttribute("message", "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i.");
            return "authentication/forgotPassword";
        }

        String otp = String.valueOf((int)(Math.random() * 900000) + 100000);
        session.setAttribute("otp", otp);
        session.setAttribute("otpEmail", email);

        try {
            MailService mailService2 = new MailService();
            mailService2.sendOtpEmail(email, otp);
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("message", "G·ª≠i email th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau.");
            return "authentication/forgotPassword";
        }

        // G·ª≠i 1 th√¥ng tin nh·ªè ƒëi c√πng redirect ƒë·ªÉ bi·∫øt r·∫±ng ƒë√£ g·ª≠i th√†nh c√¥ng
        redirectAttributes.addFlashAttribute("otpSent", true);

        return "redirect:/verifyOtp"; 
    }

    
    @GetMapping("/verifyOtp")
    public String showVerifyOtpPage(HttpSession session, Model model) {
    	System.out.println("Session ID: " + session.getId());

        String otp = (String) session.getAttribute("otp");

        if (otp == null) {
            model.addAttribute("error", "OTP ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i.");
            return "authentication/forgotPassword";
        }
        return "authentication/verifyOtp";
    }

    
    @PostMapping("/verifyOtp")
    public String verifyOtp(
            @RequestParam("otp") String otpInput,
            HttpSession session,
            Model model) {

        String otp = (String) session.getAttribute("otp");

        if (otp == null) {
            model.addAttribute("error", "OTP ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i.");
            return "authentication/verifyOtp";
        }

        if (!otp.equals(otpInput)) {
            model.addAttribute("error", "OTP kh√¥ng ch√≠nh x√°c.");
            return "authentication/verifyOtp";
        }

        // OTP ƒë√∫ng: Cho ph√©p reset m·∫≠t kh·∫©u
        return "redirect:/resetPassword";  // Chuy·ªÉn ƒë·∫øn trang resetPassword
    }
    
    @GetMapping("/resetPassword")
    public String showResetPasswordPage(HttpSession session, Model model) {
    	LOGGER.debug("------------------Calling api GET : /resetPassword");

        // Ki·ªÉm tra xem session c√≥ ch·ª©a th√¥ng tin OTP v√† email kh√¥ng
        String otp = (String) session.getAttribute("otp");
        String email = (String) session.getAttribute("otpEmail");

        // N·∫øu OTP ho·∫∑c email kh√¥ng t·ªìn t·∫°i trong session, tr·∫£ v·ªÅ trang forgotPassword
        if (otp == null || email == null) {
            model.addAttribute("error", "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i.");
            return "authentication/forgotPassword";
        }

        // N·∫øu OTP v√† email h·ª£p l·ªá, tr·∫£ v·ªÅ trang resetPassword
        return "authentication/resetPassword";
    }


    
    @PostMapping("/resetPassword")
    public String resetPassword(
            @RequestParam("password") String password,
            @RequestParam("confirmPassword") String confirmPassword,
            HttpSession session,
            RedirectAttributes redirectAttributes) {

    	LOGGER.debug("------------------Calling api POST: /resetPassword");
    	LOGGER.debug("password: {}", password);
    	LOGGER.debug("confirmPassword: {}", confirmPassword);
        // Ki·ªÉm tra n·∫øu m·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp
        if (!password.equals(confirmPassword)) {
            redirectAttributes.addFlashAttribute("error", "M·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp.");
            return "redirect:/resetPassword"; // üî• Redirect v·ªÅ form resetPassword, tr√°nh l·ªói reload form POST
        }

        // L·∫•y email t·ª´ session
        String email = (String) session.getAttribute("otpEmail");
        if (email == null) {
            redirectAttributes.addFlashAttribute("error", "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i.");
            return "redirect:/forgotPassword"; // üî• Redirect v·ªÅ forgotPassword
        }

        // T√¨m ng∆∞·ªùi d√πng t·ª´ email
        User user = daoUser.findByEmail(email);
        if (user == null) {
            redirectAttributes.addFlashAttribute("error", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y.");
            return "redirect:/forgotPassword"; // üî• Redirect v·ªÅ forgotPassword
        }

        // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
        String encodedPassword = passwordEncoder.encode(password);
    	LOGGER.debug("encodedPassword: {}", encodedPassword);

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi cho ng∆∞·ªùi d√πng
        user.setPassword(encodedPassword);
        daoUser.update(user);  // L∆∞u ng∆∞·ªùi d√πng v·ªõi m·∫≠t kh·∫©u m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu

     // X√≥a OTP v√† email kh·ªèi session (kh√¥ng x√≥a to√†n b·ªô session)
        session.removeAttribute("otp");
        session.removeAttribute("otpEmail");

        return "redirect:/login";
    }





  
}
